# Fichier : shop/services.py
import os
import re
import logging
from decimal import Decimal, InvalidOperation
from openai import OpenAI
from django.utils import timezone
from datetime import timedelta
from django.db.models import Q, Avg
from .models import (
    Product, NegotiationSettings, Conversation, Message, 
    MerchantActivity, ProductImage, ProductVideo, ProductVariation,
    Review, Category, SubCategory
)

# Configuration du logger
logger = logging.getLogger(__name__)

# services.py - CORRECTION de la fonction should_use_ai

def should_use_ai(conversation):
    """
    D√©termine si l'IA doit r√©pondre en fonction de l'activit√© r√©elle du commer√ßant
    """
    try:
        # V√©rifie si la n√©gociation IA est activ√©e
        try:
            negotiation_settings = NegotiationSettings.objects.get(shop=conversation.product.shop)
            if not negotiation_settings.is_active:
                logger.debug(f"N√©gociation IA d√©sactiv√©e pour {conversation.merchant}")
                return False
        except NegotiationSettings.DoesNotExist:
            logger.debug(f"Param√®tres de n√©gociation non trouv√©s pour {conversation.merchant.shop}")
            return False

        # V√©rifie l'activit√© du commer√ßant
        try:
            activity = MerchantActivity.objects.get(merchant=conversation.merchant)
            
            # L'IA n'intervient PAS si :
            # 1. Le commer√ßant est en ligne ET actif r√©cemment (moins de 2 minutes)
            if activity.is_online and activity.minutes_since_last_seen < 2:
                logger.debug(f"Commer√ßant {conversation.merchant} en ligne et actif - IA n'intervient pas")
                return False
            
            # 2. Le commer√ßant a √©t√© actif dans le chat r√©cemment (moins de 10 minutes)
            recent_messages = Message.objects.filter(
                conversation__merchant=conversation.merchant,
                sender=conversation.merchant.user,
                timestamp__gte=timezone.now() - timedelta(minutes=10)
            )
            if recent_messages.exists():
                logger.debug(f"Commer√ßant {conversation.merchant} actif dans le chat - IA n'intervient pas")
                return False
                
        except MerchantActivity.DoesNotExist:
            # Si pas d'info d'activit√©, l'IA peut intervenir
            logger.debug(f"Aucune activit√© trouv√©e pour {conversation.merchant} - IA peut intervenir")
            pass
            
        # L'IA intervient seulement si toutes les conditions sont remplies
        logger.info(f"IA autoris√©e √† r√©pondre pour la conversation {conversation.id}")
        return True
        
    except Exception as e:
        logger.error(f"Erreur dans should_use_ai: {e}")
        return False

def extract_price_from_message(message):
    """
    Extrait un prix d'un message texte avec plusieurs motifs
    """
    # Nettoyage du message
    cleaned_message = message.replace(',', '.').replace(' ', '')
    
    # Recherche de motifs de prix courants
    price_patterns = [
        r'(\d+(?:\.\d+)?)\s*CFA',
        r'(\d+(?:\.\d+)?)\s*‚Ç¨',
        r'(\d+(?:\.\d+)?)\s*euros',
        r'prix\s*:\s*(\d+(?:\.\d+)?)',
        r'propos[√©e]\s*(\d+(?:\.\d+)?)',
        r'(\d+(?:\.\d+)?)\s*$',
        r'(\d+(?:\.\d+)?)\s*francs',
        r'√†\s*(\d+(?:\.\d+)?)',
        r'pour\s*(\d+(?:\.\d+)?)',
        r'(\d+)\s*milliers',
        r'(\d+)\s*mille'
    ]
    
    for pattern in price_patterns:
        match = re.search(pattern, message, re.IGNORECASE)
        if match:
            try:
                price_str = match.group(1).replace(',', '.')
                price = Decimal(price_str)
                
                # Validation du prix raisonnable
                if price > 0 and price < 10000000:  # Entre 0 et 10 millions
                    logger.debug(f"Prix extrait: {price} CFA")
                    return price
            except (InvalidOperation, ValueError) as e:
                logger.debug(f"Erreur conversion prix: {e}")
                continue
    
    logger.debug("Aucun prix valide trouv√© dans le message")
    return None

def is_negotiation_message(message):
    """
    D√©termine si le message concerne une n√©gociation de prix
    """
    negotiation_keywords = [
        'prix', 'cher', 'co√ªt', 'tarif', 'proposition', 'offre', 
        'n√©gocier', 'marchander', 'discuter', 'r√©duction', 'rabais',
        'solde', 'promotion', 'discount', 'baisser', 'r√©duire',
        'marchandage', 'arranger', 'conc√©der', 'discount', 'bon prix',
        'dernier prix', 'meilleur prix', 'prix final'
    ]
    
    message_lower = message.lower()
    return any(keyword in message_lower for keyword in negotiation_keywords)

def is_technical_question(message):
    """
    D√©termine si le message est une question technique sur le produit
    """
    question_patterns = [
        r'comment.*fonctionne',
        r'quelle.*taille',
        r'quelles.*caract√©ristiques',
        r'c\'est quoi',
        r'qu\'est.*ce que',
        r'peux.*tu expliquer',
        r'd√©cris.*moi',
        r'parle.*moi',
        r'dis.*moi',
        r'caract√©ristique',
        r'sp√©cification',
        r'technique',
        r'mat√©riau',
        r'composition',
        r'dimension',
        r'capacit√©',
        r'utilisation',
        r'fonctionnalit√©',
        r'avantage',
        r'inconv√©nient',
        r'mode d\'emploi',
        r'notice',
        r'garantie',
        r'entretien',
        r'nettoyage'
    ]
    
    message_lower = message.lower()
    return any(re.search(pattern, message_lower) for pattern in question_patterns)

def is_general_question(message):
    """
    D√©termine si le message est une question g√©n√©rale
    """
    general_patterns = [
        r'bonjour',
        r'bonsoir',
        r'salut',
        r'coucou',
        r'hello',
        r'hi ',
        r'√ßa va',
        r'cv ',
        r'disponible',
        r'stock',
        r'livraison',
        r'd√©lai',
        r'envoi',
        r'exp√©dition',
        r'retour',
        r'remboursement',
        r'√©change',
        r'couleur',
        r'mod√®le',
        r'version'
    ]
    
    message_lower = message.lower()
    return any(re.search(pattern, message_lower) for pattern in general_patterns)

def build_product_context(product):
    """
    Construit un contexte d√©taill√© sur le produit pour l'IA
    """
    context = f"""
INFORMATIONS D√âTAILL√âES DU PRODUIT :

üìã DESCRIPTION G√âN√âRALE :
Nom : {product.name}
Prix initial : {product.price} CFA
Description : {product.description or "Aucune description disponible"}
Stock disponible : {product.stock} unit√©s
Cat√©gorie : {product.category.name if product.category else "Non cat√©goris√©"}
Sous-cat√©gorie : {product.subcategory.name if product.subcategory else "Non cat√©goris√©"}
Date d'ajout : {product.date_added.strftime('%d/%m/%Y')}

üè™ INFORMATIONS BOUTIQUE :
Commer√ßant : {product.shop.merchant.first_name} {product.shop.merchant.last_name}
Description boutique : {product.shop.description or "Aucune description"}
"""
    
    # Ajoute les variations de produit si elles existent
    variations = product.variations.all()
    if variations.exists():
        context += "\nüé® VARIATIONS DISPONIBLES :\n"
        for variation in variations:
            variation_price = product.price + variation.price_modifier
            context += f"- {variation.type} : {variation.value} "
            if variation.price_modifier != 0:
                context += f"(prix: {variation_price} CFA) "
            if variation.stock_variation > 0:
                context += f"(stock: {variation.stock_variation})"
            context += "\n"
    
    # Ajoute les m√©dias disponibles
    images = product.images.all()
    if images.exists():
        context += f"\nüñºÔ∏è M√âDIAS : {images.count()} image(s) disponible(s)"
    
    videos = product.videos.all()
    if videos.exists():
        context += f"\nüé• VID√âOS : {videos.count()} vid√©o(s) de d√©monstration"
    
    # Ajoute les avis si disponibles
    reviews = product.reviews.all()
    if reviews.exists():
        avg_rating = reviews.aggregate(Avg('rating'))['rating__avg'] or 0
        context += f"\n‚≠ê AVIS CLIENTS : Note moyenne {avg_rating:.1f}/5 sur {reviews.count()} avis"
    
    # Ajoute les produits similaires
    similar_products = product.similar_products.all()[:3]
    if similar_products.exists():
        context += "\nüîó PRODUITS SIMILAIRES :\n"
        for similar in similar_products:
            context += f"- {similar.name} ({similar.price} CFA)\n"
    
    return context

def get_conversation_history(conversation, max_messages=6):
    """
    R√©cup√®re l'historique r√©cent de la conversation
    """
    messages = conversation.messages.all().order_by('-timestamp')[:max_messages]
    history = []
    
    for message in reversed(messages):
        role = "user" if message.sender == conversation.client else "assistant"
        history.append({
            "role": role,
            "content": message.text
        })
    
    return history

def get_openai_client():
    """
    Retourne le client OpenAI configur√© pour OpenRouter
    """
    api_key = os.environ.get("OPENROUTER_API_KEY")
    
    if not api_key:
        logger.error("‚ùå CL√â API OPENROUTER NON CONFIGUR√âE")
        logger.error("üí° Pour configurer :")
        logger.error("1. Allez sur https://openrouter.ai/")
        logger.error("2. Cr√©ez un compte et g√©n√©rez une cl√© API")
        logger.error("3. D√©finissez la variable d'environnement : export OPENROUTER_API_KEY='votre_cl√©'")
        return None

    try:
        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=api_key,
        )
        
        # Test simple de la cl√©
        try:
            client.chat.completions.create(
                model="mistralai/mistral-small-3.1-24b-instruct:free",
                messages=[{"role": "user", "content": "test"}],
                max_tokens=5
            )
        except Exception as test_error:
            if "401" in str(test_error):
                logger.error("‚ùå CL√â API OPENROUTER INVALIDE")
                logger.error("üí° V√©rifiez votre cl√© API sur https://openrouter.ai/keys")
                return None
            # Pour les autres erreurs, on continue car le test a au moins confirm√© que la cl√© est valide
        
        logger.info("‚úÖ Cl√© API OpenRouter valid√©e")
        return client
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation client OpenAI: {e}")
        return None

def get_ai_negotiation_response(product: Product, user_message: str, conversation: Conversation):
    """
    Appelle l'API Mistral via OpenRouter pour g√©n√©rer une r√©ponse contextuelle et intelligente
    """
    # V√©rifie si l'IA doit r√©pondre
    if not should_use_ai(conversation):
        logger.debug("IA non autoris√©e √† r√©pondre")
        return None

    # R√©cup√®re le client OpenAI
    client = get_openai_client()
    if not client:
        logger.error("‚ùå Impossible d'initialiser le client API - utilisation du mode secours")
        return get_fallback_response(product, user_message, conversation)

    # R√©cup√®re les param√®tres de n√©gociation
    try:
        negotiation_settings = NegotiationSettings.objects.get(shop=conversation.merchant.shop)
        min_price = negotiation_settings.min_price_threshold or Decimal(product.price * Decimal('0.7'))
        max_discount_percentage = negotiation_settings.max_discount_percentage or Decimal('10.00')
        
        logger.debug(f"Param√®tres n√©gociation: min={min_price}, max_discount={max_discount_percentage}%")
        
    except NegotiationSettings.DoesNotExist:
        min_price = Decimal(product.price * Decimal('0.7'))
        max_discount_percentage = Decimal('10.00')
        logger.debug("Param√®tres n√©gociation par d√©faut utilis√©s")

    # Construit le contexte du produit
    product_context = build_product_context(product)
    
    # Analyse le message de l'utilisateur
    user_price_offer = extract_price_from_message(user_message)
    is_negotiation = is_negotiation_message(user_message)
    is_technical = is_technical_question(user_message)
    
    logger.debug(f"Analyse message: prix={user_price_offer}, n√©gociation={is_negotiation}, technique={is_technical}")

    # Pr√©pare le prompt syst√®me adapt√© au contexte
    if user_price_offer is not None:
        # Mode n√©gociation de prix
        system_prompt = f"""Tu es {conversation.merchant.first_name}, assistant commercial.

Produit: {product.name}
Prix: {product.price} CFA
Offre client: {user_price_offer} CFA

R√©ponds en fran√ßais en 1-2 phrases. Sois professionnel."""
        
    elif is_technical:
        # Mode r√©ponse aux questions techniques
        system_prompt = f"""Tu es {conversation.merchant.first_name}, expert technique.

Produit: {product.name}

R√©ponds √† la question technique en 2-3 phrases. Sois pr√©cis."""
        
    elif is_negotiation:
        # Mode initiation de n√©gociation
        system_prompt = f"""Tu es {conversation.merchant.first_name}, commercial.

Produit: {product.name} - {product.price} CFA

Engage la discussion commerciale en 1-2 phrases. Sois professionnel."""
        
    else:
        # Mode conversation g√©n√©rale
        system_prompt = f"""Tu es {conversation.merchant.first_name}, assistant.

Produit: {product.name}

Accueille le client en 1-2 phrases. Sois courtois."""

    # Construit les messages pour l'API
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_message}
    ]

    try:
        logger.info(f"üîó Appel API Mistral pour conversation {conversation.id}")
        
        completion = client.chat.completions.create(
            extra_headers={
                "HTTP-Referer": "https://deanna-ecommerce.com",
                "X-Title": "DEANNA E-commerce",
            },
            model="mistralai/mistral-small-3.1-24b-instruct:free",
            messages=messages,
            max_tokens=100,
            temperature=0.7,
        )
        
        ai_message = completion.choices[0].message.content.strip()
        logger.info(f"‚úÖ R√©ponse Mistral g√©n√©r√©e: {ai_message}")
        
        return ai_message
        
    except Exception as e:
        logger.error(f"‚ùå Erreur API OpenRouter: {e}")
        
        # V√©rifie si c'est une erreur d'authentification
        if "401" in str(e) or "User not found" in str(e):
            logger.error("üö® ERREUR D'AUTHENTIFICATION - V√©rifiez votre cl√© API OpenRouter")
            logger.error("üí° Allez sur https://openrouter.ai/keys pour g√©n√©rer une nouvelle cl√©")
        
        return get_fallback_response(product, user_message, conversation)

def get_fallback_response(product, user_message, conversation):
    """
    R√©ponse de secours intelligente quand l'IA n'est pas disponible
    """
    user_price_offer = extract_price_from_message(user_message)
    
    if user_price_offer is not None:
        try:
            negotiation_settings = NegotiationSettings.objects.get(shop=conversation.merchant.shop)
            min_price = negotiation_settings.min_price_threshold or Decimal(product.price * Decimal('0.7'))
        except NegotiationSettings.DoesNotExist:
            min_price = Decimal(product.price * Decimal('0.7'))

        if user_price_offer >= product.price:
            return f"J'accepte votre offre de {user_price_offer} CFA ! Le produit est √† vous."
        elif user_price_offer >= min_price:
            return f"Je peux vous proposer {user_price_offer} CFA. C'est un prix raisonnable !"
        else:
            return f"Je ne peux pas accepter moins de {min_price} CFA pour ce produit de qualit√©."
            
    elif is_technical_question(user_message):
        return "Je vous remercie pour votre question technique. Le commer√ßant vous r√©pondra d√®s son retour avec les informations d√©taill√©es."
        
    elif "bonjour" in user_message.lower() or "salut" in user_message.lower():
        return f"Bonjour ! Je suis l'assistant de {conversation.merchant.first_name}. Comment puis-je vous aider avec {product.name} ?"
        
    elif "merci" in user_message.lower():
        return "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions."
        
    else:
        return "Merci pour votre message. Le commer√ßant vous r√©pondra rapidement."

def update_merchant_activity(user):
    """
    Met √† jour l'activit√© du commer√ßant (√† appeler √† chaque connexion/action)
    """
    if hasattr(user, 'merchant'):
        try:
            activity, created = MerchantActivity.objects.get_or_create(merchant=user.merchant)
            activity.last_seen = timezone.now()
            activity.is_online = True
            
            if created:
                activity.last_login = timezone.now()
                logger.info(f"Nouvelle activit√© cr√©√©e pour {user.merchant}")
            else:
                logger.debug(f"Activit√© mise √† jour pour {user.merchant}")
                
            activity.save()
            return activity
            
        except Exception as e:
            logger.error(f"Erreur mise √† jour activit√© pour {user.merchant}: {e}")
    
    return None

def get_merchant_status(merchant):
    """
    Retourne le statut d√©taill√© d'un commer√ßant
    """
    try:
        activity = MerchantActivity.objects.get(merchant=merchant)
        
        if not hasattr(activity, 'minutes_since_last_seen'):
            # Calcul manuel si la propri√©t√© n'existe pas
            from django.utils import timezone
            minutes_since_seen = (timezone.now() - activity.last_seen).total_seconds() / 60
        else:
            minutes_since_seen = activity.minutes_since_last_seen
        
        if activity.is_online:
            if minutes_since_seen < 1:
                return {
                    'status': 'en_ligne_actif',
                    'label': 'En ligne',
                    'description': 'Connect√© et actif',
                    'can_use_ai': False
                }
            elif minutes_since_seen < 3:
                return {
                    'status': 'en_ligne_inactif',
                    'label': 'En ligne',
                    'description': 'Connect√© mais inactif',
                    'can_use_ai': False
                }
            else:
                return {
                    'status': 'en_ligne_absent',
                    'label': 'Absent',
                    'description': 'Connect√© mais absent',
                    'can_use_ai': True
                }
        else:
            if minutes_since_seen < 5:
                return {
                    'status': 'hors_ligne_recent',
                    'label': 'Hors ligne',
                    'description': 'D√©connect√© r√©cemment',
                    'can_use_ai': True
                }
            else:
                return {
                    'status': 'hors_ligne',
                    'label': 'Hors ligne',
                    'description': 'D√©connect√©',
                    'can_use_ai': True
                }
                
    except MerchantActivity.DoesNotExist:
        return {
            'status': 'inconnu',
            'label': 'Statut inconnu',
            'description': 'Aucune information disponible',
            'can_use_ai': True
        }

def can_use_ai_for_conversation(conversation):
    """
    V√©rifie si l'IA peut √™tre utilis√©e pour une conversation sp√©cifique
    """
    status = get_merchant_status(conversation.merchant)
    
    # V√©rifie les param√®tres de n√©gociation
    try:
        negotiation_settings = NegotiationSettings.objects.get(shop=conversation.merchant.shop)
        if not negotiation_settings.is_active:
            return False
    except NegotiationSettings.DoesNotExist:
        return False
    
    return status['can_use_ai']

def get_conversation_ai_status(conversation):
    """
    Retourne le statut complet de l'IA pour une conversation
    """
    merchant_status = get_merchant_status(conversation.merchant)
    
    try:
        negotiation_settings = NegotiationSettings.objects.get(shop=conversation.merchant.shop)
        ai_enabled = negotiation_settings.is_active
    except NegotiationSettings.DoesNotExist:
        ai_enabled = False
    
    return {
        'merchant_status': merchant_status,
        'ai_enabled': ai_enabled,
        'can_use_ai': merchant_status['can_use_ai'] and ai_enabled,
        'merchant_name': f"{conversation.merchant.first_name} {conversation.merchant.last_name}",
        'shop_name': conversation.merchant.shop.description or "Boutique"
    }
